apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - name: mongo
      port: 27017
  clusterIP: None
  selector:
    app: mongo

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo
data:
  init.sh: |
    #!/bin/bash
    set -ex
    apt update && apt install iputils-ping -y

    until ping -c 1 "$HOSTNAME".mongo; do
      echo "waiting for DNS (${HOSTNAME}.mongo)..."
      sleep 2
    done

    until /usr/bin/mongosh --eval 'printjson(db.serverStatus())'; do
      echo "connecting to local mongo..."
      sleep 2
    done
    echo "connected to local"

    HOST=mongo-0.mongo:27017
    until /usr/bin/mongosh --host="$HOST" --eval 'printjson(db.serverStatus())'; do
      echo "connecting to remote mongo..."
      sleep 2
    done
    echo "connected to remote"

    if [[ "$HOSTNAME" == 'mongo-0' ]]; then
      echo "initializing replica set"
      /usr/bin/mongosh --eval="printjson(rs.initiate({'_id': 'rs0', 'members': [{'_id': 0, 'host': 'mongo-0.mongo:27017'}]}))"
    else
      until /usr/bin/mongosh --host="$HOST" --eval="printjson(rs.status())" | grep -v "no replset config has been received"; do
        echo "waiting for replication set initialization"
        sleep 2
      done
      echo "adding self to mongo-0"
      /usr/bin/mongosh --host="$HOST" --eval="printjson(rs.add('${HOSTNAME}.mongo'))"
    fi
    echo "initialized"

    while true; do
      sleep 3600
    done

---
apiVersion: v1
kind: Secret
metadata:
  name: mongo
data:
  MONGO_INITDB_ROOT_USERNAME: bW9uZ28K
  MONGO_INITDB_ROOT_PASSWORD: bW9uZ28K

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:7.0.8-jammy
          command: [mongod, --replSet, rs0, --bind_ip_all]
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo
                  key: MONGO_INITDB_ROOT_PASSWORD
          livenessProbe:
            exec:
              command: [mongo, --eval, db.serverStatus()]
            initialDelaySeconds: 10
            timeoutSeconds: 10
          ports:
            - name: web
              containerPort: 27017
        # this container is used as sidecar and needs to run side by side with the main mongodb container
        #
        # this container only use mongo cli tool to connect with other mongo replica since the main container needs to run with mongod
        # and cannot execute other shell comand when mongod is running
        - name: init-mongo
          image: mongo:7.0.8-jammy
          command: [bash, /config/init.sh]
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: mongo
